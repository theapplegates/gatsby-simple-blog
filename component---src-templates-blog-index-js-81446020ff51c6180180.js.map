{"version":3,"file":"component---src-templates-blog-index-js-81446020ff51c6180180.js","mappings":"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","sources":["webpack://gatsby-simple-blog/./src/components/PostAbbrev/PostAbbrev.js","webpack://gatsby-simple-blog/./src/components/SEO/SEO.js","webpack://gatsby-simple-blog/./src/components/TagList/TagList.js","webpack://gatsby-simple-blog/./src/components/Pagination/Pagination.js","webpack://gatsby-simple-blog/./src/templates/blog-index.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Link } from 'gatsby';\n\nimport { rhythm } from 'utils/typography';\nimport { formatReadingTime } from 'utils/helpers';\nimport { formatDate } from 'utils/i18n';\n\nimport TagList from '../TagList';\n\nconst PostAbbrev = function({ slug, title, date, timeToRead, excerpt, tags, base }) {\n  let excerptPart;\n  if (excerpt) {\n    excerptPart = (\n      <p\n        dangerouslySetInnerHTML={{\n          __html: excerpt,\n        }}\n      />\n    );\n  }\n\n  let tagsPart;\n  if (tags) {\n    tagsPart = (\n      <TagList style={{ margin: '0.5rem 0 -0.5rem -0.5rem' }} tags={tags} baseUrl={`${base}tags`} />\n    );\n  }\n\n  return (\n    <article>\n      <header>\n        <h3\n          style={{\n            fontFamily: 'Montserrat, sans-serif',\n            fontSize: rhythm(1),\n            marginBottom: rhythm(1 / 4),\n          }}\n        >\n          <Link style={{ boxShadow: 'none' }} to={slug} rel=\"bookmark\">\n            {title}\n          </Link>\n        </h3>\n        {tagsPart}\n        <small>{`${formatDate(date)} â€¢ ${formatReadingTime(timeToRead)}`}</small>\n        {excerptPart}\n      </header>\n    </article>\n  );\n}\n\nPostAbbrev.propTypes = {\n  slug: PropTypes.string.isRequired,\n  title: PropTypes.string,\n  date: PropTypes.string.isRequired,\n  timeToRead: PropTypes.number.isRequired,\n  excerpt: PropTypes.string,\n  tags: PropTypes.array,\n  base: PropTypes.string,\n};\n\nPostAbbrev.defaultProps = {\n  title: null,\n  excerpt: null,\n  tags: null,\n  base: '',\n};\n\nexport default PostAbbrev;\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Helmet } from 'react-helmet';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport { useLang } from 'context/LanguageContext';\n\nconst SEO = function({ description, meta, keywords, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n            lang\n          }\n        }\n      }\n    `,\n  );\n\n  const { lang } = useLang();\n\n  const metaDescription = description || site.siteMetadata.description;\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang: lang || site.siteMetadata.lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ]\n        .concat(\n          keywords.length > 0\n            ? {\n                name: `keywords`,\n                content: keywords.join(`, `),\n              }\n            : [],\n        )\n        .concat(meta)}\n    />\n  );\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired,\n};\n\nSEO.defaultProps = {\n  meta: [],\n  keywords: [],\n  description: '',\n};\n\nexport default SEO;\n","import './TagList.css';\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { kebabCase } from 'utils/helpers';\nimport Tag from '../Tag';\n\nconst TagList = function({ tags, baseUrl, ...restProps }) {\n  return (\n    <ul className=\"tag-ul\" {...restProps}>\n      {tags.map((text) => (\n        <li key={text}>\n          <Tag text={text} url={`${baseUrl}/${kebabCase(text)}`} />\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nTagList.propTypes = {\n  tags: PropTypes.array.isRequired,\n  baseUrl: PropTypes.string,\n};\n\nTagList.defaultProps = {\n  baseUrl: '',\n};\n\nexport default TagList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Link } from 'gatsby';\nimport { useLang } from 'context/LanguageContext';\n\nimport './Pagination.css';\n\nconst Pagination = function({ currentPage, totalPageNumber }) {\n  const { homeLink } = useLang();\n\n  const befMark =\n    currentPage === 1 ? (\n      <span className=\"disabled\">&laquo;</span>\n    ) : (\n      <Link to={`${homeLink}${currentPage - 1}`}>&laquo;</Link>\n    );\n  const nextMark =\n    currentPage === totalPageNumber ? (\n      <span className=\"disabled\">&raquo;</span>\n    ) : (\n      <Link to={`${homeLink}${currentPage + 1}`}>&raquo;</Link>\n    );\n\n  return (\n    <div className=\"pagination\">\n      {befMark}\n      {Array.from({ length: totalPageNumber })\n        .map((_, ind) => ind + 1)\n        .map((pageNum) => {\n          return pageNum === currentPage ? (\n            <span key={`pageNum-${pageNum}`} className=\"active\">\n              {pageNum}\n            </span>\n          ) : (\n            <Link key={`pageNum-${pageNum}`} to={`${homeLink}${pageNum}`}>\n              {pageNum}\n            </Link>\n          );\n        })}\n      {nextMark}\n    </div>\n  );\n}\n\nPagination.propTypes = {\n  currentPage: PropTypes.number,\n  totalPageNumber: PropTypes.number,\n};\n\nPagination.defaultProps = {\n  currentPage: 1,\n  totalPageNumber: 1,\n};\n\nexport default Pagination;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { graphql } from 'gatsby';\n\nimport Bio from 'components/Bio';\nimport Layout from 'components/Layout';\nimport SEO from 'components/SEO';\nimport PostAbbrev from 'components/PostAbbrev';\nimport Pagination from 'components/Pagination';\nimport { useLang } from 'context/LanguageContext';\nimport { formatMessage } from 'utils/i18n';\n\nconst BlogIndex = function ({ pageContext, data, location }) {\n  const { from, to, currentPage, numPages } = pageContext;\n  const siteTitle = data.site.siteMetadata.title;\n  const posts = data.allMarkdownRemark.edges;\n\n  const { lang, homeLink } = useLang();\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <SEO title={formatMessage('tIndTitle')} keywords={formatMessage('taIndKeywords')} />\n      <aside>\n        <Bio />\n      </aside>\n      <h3>\n        {formatMessage('tfIndCountPosts', { count: data.allMarkdownRemark.totalCount, from, to })}\n      </h3>\n      {posts.map(({ node }) => {\n        const title = node.frontmatter.title || node.fields.slug;\n        return (\n          <PostAbbrev\n            lang={lang}\n            base={homeLink}\n            key={node.fields.slug}\n            slug={node.fields.slug}\n            date={node.frontmatter.date}\n            timeToRead={node.timeToRead}\n            title={title}\n            excerpt={node.frontmatter.description || node.excerpt}\n            tags={node.frontmatter.tags}\n          />\n        );\n      })}\n      <Pagination currentPage={currentPage} totalPageNumber={numPages} />\n    </Layout>\n  );\n};\n\nBlogIndex.propTypes = {\n  pageContext: PropTypes.object.isRequired,\n  data: PropTypes.object.isRequired,\n  location: PropTypes.object.isRequired,\n};\n\nBlogIndex.defaultProps = {};\n\nexport default BlogIndex;\n\nexport const pageQuery = graphql`\n  query ($langKey: String!, $skip: Int!, $limit: Int!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      filter: { fields: { langKey: { eq: $langKey } } }\n      sort: { fields: [frontmatter___date], order: DESC }\n      limit: $limit\n      skip: $skip\n    ) {\n      totalCount\n      edges {\n        node {\n          excerpt\n          timeToRead\n          fields {\n            slug\n            langKey\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            description\n            tags\n          }\n        }\n      }\n    }\n  }\n`;\n"],"names":["PostAbbrev","excerptPart","tagsPart","slug","title","date","timeToRead","excerpt","tags","base","dangerouslySetInnerHTML","__html","TagList","style","margin","baseUrl","fontFamily","fontSize","rhythm","marginBottom","Link","boxShadow","to","rel","formatDate","formatReadingTime","defaultProps","SEO","description","meta","keywords","site","useStaticQuery","lang","useLang","metaDescription","siteMetadata","Helmet","htmlAttributes","titleTemplate","name","content","property","author","concat","length","join","restProps","className","map","text","key","Tag","url","kebabCase","Pagination","currentPage","totalPageNumber","homeLink","befMark","nextMark","Array","from","_","ind","pageNum","BlogIndex","pageContext","data","location","numPages","siteTitle","posts","allMarkdownRemark","edges","Layout","formatMessage","Bio","count","totalCount","node","frontmatter","fields"],"sourceRoot":""}